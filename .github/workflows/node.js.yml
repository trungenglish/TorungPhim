# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["develop", "feature/**" ]
  pull_request:
    branches: [ "main","develop" ]

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

      #Cache for node_modules
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install dependencies
      run: npm ci

      #Check quality code
    - name: Lint code
      run: npm run lint
      continue-on-error: true

      #Check if project uses typescript
    - name: Type check (TypeScript)
      run: npm run type-check || true
      continue-on-error: true

      #Security check of dependencies, alert if high-level vulnerabilities are detected
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Build
      run: npm run build --if-present
      
    - name: Run unit tests
      run: npm test

      #Create report test coverage
    - name: Generate code coverage
      run: npm run test:coverage || true
      continue-on-error: true

  deploy-staging:
      needs: [build-and-test]
      if: github.ref == 'refs/heads/develop' && success()
      runs-on: ubuntu-latest
      environment: staging
      
      steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files-20.x  # Using the LTS version for deployment
          path: dist
      - name: Deploy to staging
      # Replace this with the appropriate deployment action for your platform
      # Example for Vercel:
      # uses: amondnet/vercel-action@v20
      # with:
      #   vercel-token: ${{ secrets.VERCEL_TOKEN }}
      #   vercel-project-id: ${{ secrets.PROJECT_ID }}
      #   vercel-org-id: ${{ secrets.ORG_ID }}
        run: echo "Deploying to staging environment"
        # Replace with actual deployment command

  deploy-production:
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-url.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files-20.x  # Using the LTS version for deployment
        path: dist
    
    - name: Deploy to production
      # Replace this with the appropriate deployment action for your platform
      # Example for AWS S3:
      # uses: jakejarvis/s3-sync-action@master
      # with:
      #   args: --acl public-read --follow-symlinks --delete
      # env:
      #   AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: echo "Deploying to production environment"
      # Replace with actual deployment command


