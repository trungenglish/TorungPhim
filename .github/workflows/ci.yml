name: Frontend CI

on:
  push:
    branches: ["develop", "feature/**" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

        #Check quality code
      - name: Lint code
        run: pnpm lint
        continue-on-error: true

        #Check if a project uses TypeScript
      - name: Type check (TypeScript)
        run: pnpm type-check
        continue-on-error: true

        #Security check of dependencies, alert if high-level vulnerabilities are detected
      - name: Security audit
        run: pnpm audit --audit-level=high
        continue-on-error: true

      - name: Build
        run: pnpm --if-present run build

      - name: Run unit tests
        run: pnpm test || true

        #Create report test coverage
      - name: Generate code coverage
        run: pnpm run test:coverage || true
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ matrix.node-version }}
          path: .next/
          retention-days: 5
          include-hidden-files: true
          if-no-files-found: error

  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  #Automation tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build for E2E tests
        run: pnpm --if-present run build
        # Ensuring we have a build for E2E tests

      - name: Run E2E Tests
        run: pnpm test:e2e || true
        continue-on-error: true

#  deploy-staging:
#    needs: [build-and-test, code-quality]
#    if: github.ref == 'refs/heads/develop' && success()
#    runs-on: ubuntu-latest
#    environment: staging
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Download build artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: build-files-22.x
#          path: .next
#
#      - name: Deploy to Vercel (Staging)
#        uses: amondnet/vercel-action@v25
#        with:
#          vercel-token: ${{ secrets.VERCEL_TOKEN }}
#          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          vercel-args: '--prod'


